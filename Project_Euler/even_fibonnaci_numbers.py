"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.
"""
import time

start_time = time.time()


def fib_even_gen(n):
    # set base values
    ans = 0
    a, b = 1, 2
    # set c value because that's the count for the fibonacci series
    # c = 1
    # yield a
    while a <= n:
        if a % 2 == 0:
            ans += a
        a, b = b, a + b
        # if a % 2 == 0:
        # Generators do not store all the values in memory, they generate the values on the fly:
        # hence that is the use of yield
    # yield a
    # c += 1
    return ans


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print(fib_even_gen(4_000_000))
    # for i, f in enumerate(fib_even_gen(4_000_000), 1):
    #     if i == 4_000_000:
    #         print("{:3d}.  {:d}".format(i, f))
    print("--- %s seconds ---" % (time.time() - start_time))
