"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import running_time
import itertools

# divisors = {}


def compute():
    triangle = 0
    for i in itertools.count(1):
        triangle += i  # This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2
        if num_divisors(triangle) > 500:
            # print(divisors)
            return str(triangle)


# Given integer x, this returns the integer floor(sqrt(x)).
def sqrt(x: int) -> int:
    assert x >= 0
    i: int = 1
    while i * i <= x:
        i *= 2
    y: int = 0
    while i > 0:
        if (y + i) ** 2 <= x:
            y += i
        i //= 2
    return y


# get teh factors of each value
def print_factors(x):
    factors = (i for i in range(1, x + 1) if x % i == 0)
    return factors


# Returns the number of integers in the range [1, n] that divide n.
def num_divisors(n):
    end = sqrt(n)

    # print_factor = print_factors(n)
    # # result = sum(1 for _ in print_factor)
    # cc = [i for i in print_factor]
    #
    # if len(cc) > 5:
    #     divisors[n] = cc
    result = sum(2
                 for i in range(1, end + 1)
                 if n % i == 0)
    if end ** 2 == n:
        result -= 1
    return result


if __name__ == "__main__":
    print(compute())
    running_time.time_to_run()
